var _user$project$orderList$merge = F2(
	function (xs, ys) {
		var _p0 = {ctor: '_Tuple2', _0: xs, _1: ys};
		if (_p0._0.ctor === '::') {
			if (_p0._1.ctor === '::') {
				var _p2 = _p0._1._0;
				var _p1 = _p0._0._0;
				return (_elm_lang$core$Native_Utils.cmp(_p1, _p2) < 0) ? {
					ctor: '::',
					_0: _p1,
					_1: A2(_user$project$orderList$merge, _p0._0._1, ys)
				} : {
					ctor: '::',
					_0: _p2,
					_1: A2(_user$project$orderList$merge, xs, _p0._1._1)
				};
			} else {
				return _p0._0;
			}
		} else {
			return _p0._1;
		}
	});
var _user$project$orderList$split = function (list) {
	var _p3 = list;
	if (_p3.ctor === '[]') {
		return {
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		};
	} else {
		var _p4 = _user$project$orderList$split(_p3._1);
		var xs = _p4._0;
		var ys = _p4._1;
		return {
			ctor: '_Tuple2',
			_0: ys,
			_1: {ctor: '::', _0: _p3._0, _1: xs}
		};
	}
};
var _user$project$orderList$mergesort = function (list) {
	var _p5 = list;
	if (_p5.ctor === '[]') {
		return list;
	} else {
		if (_p5._1.ctor === '[]') {
			return list;
		} else {
			var _p6 = _user$project$orderList$split(list);
			var xs = _p6._0;
			var ys = _p6._1;
			return A2(
				_user$project$orderList$merge,
				_user$project$orderList$mergesort(xs),
				_user$project$orderList$mergesort(ys));
		}
	}
};
var _user$project$orderList$main = _elm_lang$virtual_dom$Native_VirtualDom.staticProgram(
	_elm_lang$html$Html$text(
		_elm_lang$core$Basics$toString(
			_user$project$orderList$mergesort(
				{
					ctor: '::',
					_0: 5,
					_1: {
						ctor: '::',
						_0: 3,
						_1: {
							ctor: '::',
							_0: 8,
							_1: {
								ctor: '::',
								_0: 1,
								_1: {
									ctor: '::',
									_0: 9,
									_1: {
										ctor: '::',
										_0: 4,
										_1: {
											ctor: '::',
											_0: 7,
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}))));

var Elm = {};
Elm['orderList'] = Elm['orderList'] || {};
if (typeof _user$project$orderList$main !== 'undefined') {
    _user$project$orderList$main(Elm['orderList'], 'orderList', undefined);
}

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);
